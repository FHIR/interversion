map "http://hl7.org/fhir/StructureMap/Timing2to3" = "R2 to R3 Conversions for Timing"

conceptmap "EventTiming" {
  prefix s = "http://hl7.org/fhir/v3/TimingEvent"
  prefix t = "http://hl7.org/fhir/event-timing"

  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
  s:HS ~ t:MORN
}

uses "http://hl7.org/fhir/DSTU2/StructureDefinition/Timing" alias TimingR2 as source
uses "http://hl7.org/fhir/StructureDefinition/Timing" alias Timing as target

imports "http://hl7.org/fhir/StructureMap/primitives2to3"
imports "http://hl7.org/fhir/StructureMap/Element2to3"
imports "http://hl7.org/fhir/StructureMap/Period2to3"
imports "http://hl7.org/fhir/StructureMap/Range2to3"
imports "http://hl7.org/fhir/StructureMap/CodeableConcept2to3"

group for type+types  Timing extends Element
  input src : TimingR2 as source
  input tgt : Timing as target

  "Timing-event" : for src.event make tgt.event
  "Timing-repeat" : for src.repeat as vs0 make tgt.repeat as vt0 then {
    "Timing.repeat-bounds-Range" : for vs0.bounds : Range as vs make vt0.bounds = create("Range") as vt then Range(vs, vt)
    "Timing.repeat-bounds-Period" : for vs0.bounds : Period as vs make vt0.bounds = create("Period") as vt then Period(vs, vt)
    "Timing.repeat-count" : for vs0.count make vt0.count
    "Timing.repeat-duration" : for vs0.duration make vt0.duration
    "Timing.repeat-durationMax" : for vs0.durationMax make vt0.durationMax
    "Timing.repeat-durationUnit" : for vs0.durationUnits make vt0.durationUnit
    "Timing.repeat-frequency" : for vs0.frequency make vt0.frequency
    "Timing.repeat-frequencyMax" : for vs0.frequencyMax make vt0.frequencyMax
    "Timing.repeat-period" : for vs0.period make vt0.period
    "Timing.repeat-periodMax" : for vs0.periodMax make vt0.periodMax
    "Timing.repeat-periodUnit" : for vs0.periodUnits make vt0.periodUnit
    "Timing.repeat-when" : for vs0.when as v make vt0.when = translate(v, "#EventTiming", "code")
  }

  "Timing-code" : for src.code make tgt.code

endgroup
