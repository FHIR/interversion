map "http://hl7.org/fhir/StructureMap/ConceptMap2to3" = "R2 to R3 Conversions for ConceptMap"

uses "http://hl7.org/fhir/DSTU2/StructureDefinition/ConceptMap" alias ConceptMapR2 as source
uses "http://hl7.org/fhir/StructureDefinition/ConceptMap" alias ConceptMap as target

imports "http://hl7.org/fhir/StructureMap/primitives2to3"
imports "http://hl7.org/fhir/StructureMap/DomainResource2to3"
imports "http://hl7.org/fhir/StructureMap/CodeableConcept2to3"
imports "http://hl7.org/fhir/StructureMap/ContactPoint2to3"
imports "http://hl7.org/fhir/StructureMap/Identifier2to3"
imports "http://hl7.org/fhir/StructureMap/Reference2to3"

group for type+types  ConceptMap extends DomainResource
  input src : ConceptMapR2 as source
  input tgt : ConceptMap as target

  "ConceptMap-url" : for src.url make tgt.url
  "ConceptMap-identifier" : for src.identifier make tgt.identifier
  "ConceptMap-version" : for src.version make tgt.version
  "ConceptMap-name" : for src.name make tgt.name
  "ConceptMap-status" : for src.status make tgt.status
  "ConceptMap-experimental" : for src.experimental make tgt.experimental
  "ConceptMap-publisher" : for src.publisher make tgt.publisher
  "ConceptMap-contact" : for src.contact as vs0 make tgt.contact as vt0 then {
    "ContactDetail-name" : for vs0.name make vt0.name
    "ContactDetail-telecom" : for vs0.telecom make vt0.telecom
  }

  "ConceptMap-date" : for src.date make tgt.date
  "ConceptMap-description" : for src.description make tgt.description
  "ConceptMap-purpose" : for src.requirements make tgt.purpose
  "ConceptMap-copyright" : for src.copyright make tgt.copyright
  "ConceptMap-jurisdiction" : for src.useContext where coding.system = 'urn:iso:std:iso:3166' make tgt.jurisdiction
  "ConceptMap-useContext" : for src.useContext as vs where (coding.system = 'urn:iso:std:iso:3166').not() make  tgt.useContext as uc,  uc.code as ucc,  ucc.system = "http://hl7.org/fhir/usage-context-type",  ucc.code = "task",  uc.value = create("CodeableConcept") as vt then CodeableConcept(vs, vt)
  "ConceptMap-source" : for src.source make tgt.source
  "ConceptMap-target" : for src.target make tgt.target

  // ConceptMap-backbone:     group src.element as srcE by srcE.codeSystem as srcSCs, inner srcE.target as srcT by srcT.codeSystem as srcTCs make tgt.group as tgtGrp, tgtGrp.source = srcSCs, tgtGrp.target = srcTCs then {
  "ConceptMap-element-1" : for src.element as srcE then {
    "ConceptMap-element-2" : for srcE.target as srcT make tgt.group as tgtGrp, tgtGrp.element as tgtE, tgtE.target as tgtT then {
      "ConceptMap-element-3" : for srcE.codeSystem make tgtGrp.source
      "ConceptMap-element-4" : for srcT.codeSystem make tgtGrp.target
      "ConceptMap-element-code":  for srcE.code make tgtE.code
      "ConceptMap-target-element":  for srcT.code make tgtT.code
      "ConceptMap-target-equivalence":  for srcT.equivalence make tgtT.equivalence
      "ConceptMap-target-comments":  for srcT.comments make tgtT.comment
      "ConceptMap-target-dependsOn":  for srcT.dependsOn as vs make tgtT.dependsOn as vt then {
        "ConceptMap-target-dependsOn-element": for vs.element make vt.property
        "ConceptMap-target-dependsOn-codeSystem": for vs.codeSystem make vt.system
        "ConceptMap-target-dependsOn-code": for vs.code make vt.code
      }  
      "ConceptMap-target-product":  for srcT.product as vs make tgtT.product as vt then {
        "ConceptMap-target-product-element": for vs.element make vt.property
        "ConceptMap-target-product-codeSystem": for vs.codeSystem make vt.system
        "ConceptMap-target-product-code": for vs.code make vt.code
      }  
    }
  }     

endgroup
